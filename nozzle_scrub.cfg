#######################################################################################################################################
##                 Nozzle clean and wipe
#######################################################################################################################################

[gcode_macro clean_nozzle]

gcode:
# First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}

    {% set start = printer["gcode_macro _USER_VARIABLE"].start %}
    {% set wipe_dist = printer["gcode_macro _USER_VARIABLE"].wipe_dist %}
    {% set wipe_qty = printer["gcode_macro _USER_VARIABLE"].wipe_qty %}
    {% set wipe_spd = printer["gcode_macro _USER_VARIABLE"].wipe_spd %}
    {% set raise_distance = printer["gcode_macro _USER_VARIABLE"].raise_distance %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Move nozzle to start position
      G1 Z{raise_distance} F1500
      G1 X{start[0]} Y{start[1]} F6000
      G1 Z{start[2]} F1500

      ## Wipe nozzle
      {% for wipes in range(1, (wipe_qty + 1)) %}
        G1 X{start[0] + wipe_dist} Y{start[1] - 5} F{wipe_spd * 60}
        G1 X{start[0]} Y{start[1]} F{wipe_spd * 60}
      {% endfor %}
 
      ## Clear from area.
      M117 Cleaned!
      G1 Z{raise_distance}

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}



[gcode_macro purge_nozzle]

gcode:
  # First, check if the axes are homed.
  {% if "xyz" in printer.toolhead.homed_axes %}
 
    {% set purgebucket = printer["gcode_macro _USER_VARIABLE"].purgebucket %}
    {% set raise_distance = printer["gcode_macro _USER_VARIABLE"].raise_distance %}

    {% set purge_len = printer["gcode_macro _USER_VARIABLE"].purge_len %}
    {% set purge_spd = printer["gcode_macro _USER_VARIABLE"].purge_spd %}
    {% set purge_temp_min = printer["gcode_macro _USER_VARIABLE"].purge_temp_min %}
    {% set purge_ret = printer["gcode_macro _USER_VARIABLE"].purge_ret %}
    {% set ooze_dwell = printer["gcode_macro _USER_VARIABLE"].ooze_dwell %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=wipe_nozzle

      ## Set to absolute positioning.
      G90

      ## Move nozzle to start position
      G1 Z{raise_distance} F1500
      G1 X{purgebucket[0]} Y{purgebucket[1]} F6000
      G1 Z{purgebucket[2]} F1500

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83                                           ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 36}
            G4 S{ooze_dwell}
            G92 E0                                        ; reset extruder
          
         {% else %}

           ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
           { action_raise_error("Temperature to low") }
           M117 Temperature to low!

         {% endif %}

      M117 Purged!
      G1 Z{raise_distance}
      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=wipe_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}


