#####################################################################
# Sensorless Homing Override
######################################################################

[respond]

[force_move]
enable_force_move: True

[gcode_macro _HomingDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer["gcode_macro _USER_VARIABLE"].debug|default(False) %}

    {% if debug %}
        { action_respond_info(message) }
    {% endif %}

[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed = printer["gcode_macro _USER_VARIABLE"].travel_speed %}
    # mandatory to save the new safe position
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set home_accel = printer["gcode_macro _USER_VARIABLE"].home_accel|default(1000) %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90
    # set a safe(sane) Acceleration
    SET_VELOCITY_LIMIT ACCEL={home_accel}

[homing_override]
axes: xyz
gcode:

    {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop|float %}
    # Safe Z for travel
    {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop %}
    {% set verbose = printer["gcode_macro _USER_VARIABLE"].verbose %}
    {% set enable_z_hop = printer["gcode_macro _USER_VARIABLE"].enable_z_hop %}
    {% set kinematic_z = 0 %}
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLE"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLE"].travel_speed * 60 %}

   #_homing_overide_check_variables_version

    {% set home_x, home_y, home_z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params and not 'Y' in params and not 'Z' in params %}
        {% set home_x, home_y, home_z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set home_x = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set home_y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set home_z = True %}
        {% endif %}
    {% endif %}  

    _entry_point function=homing_override


    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            {% if printer.toolhead.position.z < z_hop %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP") }
                {% endif %}
                G0 Z{z_hop} F{z_drop_feedrate}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{z_hop} F{z_drop_feedrate}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}


   # Home x
   {% if home_x %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        {% if printer["gcode_macro _HOME_X"] is defined %}
             _HomingDebug msg="homing_override calling _HOME_X external script to handle the X homing"
             _HOME_X
        {% else %}
            _HomingDebug msg="homing_override Homing X, G28 X0"
            _SET_ACC VAL=HOME
            _SET_CURRENT VAL=HOME
            G28 X0
            G91                                              # relative positioning
            G1 X-10 F1200                                    # move away
            G4 P3000                                         # Wait just a second… (give StallGuard registers time to clear)
            G90
            {% if params.RESET_SETTINGS|default('true') == 'true' %}
              _SET_CURRENT
              _SET_ACC
            {% endif %}
        {% endif %}
   {% endif %}

    # Home y
    {% if home_y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        {% if printer["gcode_macro _HOME_Y"] is defined %}
             _HomingDebug msg="homing_override calling _HOME_Y external script to handle the Y homing"
             _HOME_Y
        {% else %}
            _HomingDebug msg="homing_override Homing Y, G28 Y0"
            _SET_ACC VAL=HOME
            _SET_CURRENT VAL=HOME
            G28 Y0
            G91                                              # relative positioning
            G1 Y-10 F1200                                    # move away
            G4 P3000                                         # Wait just a second… (give StallGuard registers time to clear)
            G90
            {% if params.RESET_SETTINGS|default('true') == 'true' %}
              _SET_CURRENT
              _SET_ACC
            {% endif %}
        {% endif %}
    {% endif %}

   # Home z
   {% if home_z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
   _Home_Z
   {% endif %}
   
    _exit_point function=homing_override


[gcode_macro _Home_Z]
gcode:
    {% set z_endstop = printer["gcode_macro _USER_VARIABLE"].z_endstop|default([-10,-10]) %}
    {% set z_hop = printer["gcode_macro _USER_VARIABLE"].z_hop|float %}
    {% set travel_feedrate = printer["gcode_macro _USER_VARIABLE"].travel_speed * 60 %}   
    {% set z_drop_feedrate = printer["gcode_macro _USER_VARIABLE"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _USER_VARIABLE"].verbose %}

     _entry_point function=Home_Z

    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        _HomingDebug msg="_Home_Z XY Axis homed"
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}
        _HomingDebug msg=" _move to Z endstop position X{z_endstop[0]} Y{z_endstop[1]}"
        G0 X{z_endstop[0]} Y{z_endstop[1]} F{travel_feedrate}
        _HomingDebug msg="_Home_Z Homing Z G28 Z"
        _SET_ACC VAL=HOME
        _SET_CURRENT VAL=HOME
        G28 Z0
        G0 Z{z_hop} F{z_drop_feedrate}
        {% if params.RESET_SETTINGS|default('true') == 'true' %}
          _SET_CURRENT
          _SET_ACC
        {% endif %}
    {% endif %}

   _exit_point function=Home_Z


#####################################################################
#    Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[gcode_macro _SET_CURRENT]
description: Helper: Set drive motor current
variable_last_val: 'CONFIG'
gcode:
  ###### set default values #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_current|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.Z_RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set xy_run  = printer['gcode_macro _USER_VARIABLE'].xy_home_current %}
    {% set z_run  = printer['gcode_macro _USER_VARIABLE'].z_home_current %}
  {% else %}
    {% if 'tmc2209 stepper_z' in printer.configfile.settings %}
      {% set xy_run  = printer.configfile.settings['tmc2209 stepper_x'].run_current %}
      {% set z_run  = printer.configfile.settings['tmc2209 stepper_z'].run_current %}
    {% elif 'tmc5160 stepper_z' in printer.configfile.settings %}
      {% set xy_run  = printer.configfile.settings['tmc5160 stepper_x'].run_current %}
      {% set z_run  = printer.configfile.settings['tmc5160 stepper_z'].run_current %}
    {% endif %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("Home&Probe: RunCur Z %.2fA rms RunCur XY %.2fA rms" % (z_run|float, xy_run|float))}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_x  CURRENT={xy_run} RESPOND=0
    SET_TMC_CURRENT STEPPER=stepper_y  CURRENT={xy_run} RESPOND=0
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run} RESPOND=0
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run} RESPOND=0
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run} RESPOND=0
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run} RESPOND=0
    M400
  {% endif %}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
variable_last_val: 'CONFIG'
gcode:
  ##### set default value #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_acc|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set accel = printer['gcode_macro _USER_VARIABLE'].home_accel %}
    {% set accel_to_decel = printer['gcode_macro _USER_VARIABLE'].home_accel|int / 2 %}
  {% else %}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel} RESPOND=0
  {% endif %}

