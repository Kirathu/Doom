#####################################################################
#	Macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set Z = params.Z|default(35)|float %}

  _CASELIGHT_ON                                                                                          # Turns on the caselight
 # _NEVERMORE_ON                                                                                         # Turns on the nevermore
 # _CHAMBER_FAN_ON                                                                                       # Turns on the BED-Fans
 
 # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  STATUS_HOMING                                                                                          # Sets SB-leds to homing-mode
  _CG28                                                                                                  # conditional home (XYZ)
  G90                                                                                                    # Absolut position

  ##  KAMP_setup and bed mesh
  SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1                                     # adaptive mesh mit parameters led und fuzz
  BED_MESH_CLEAR                                                                                         # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                                            # Displays info
    PARKCENTER                                                                                           # Goes to center of the bed
    STATUS_HEATING                                                                                       # Sets SB-leds to heating-mode
    M106 S128                                                                                            # Turns on the PT-fan on 50 prozent
    M140 S{target_bed}                                                                                   # 
    M190 S{target_bed}                                                                                   # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"                                                   # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={(target_chamber|float * 0.85)|round}   # Waits for chamber  to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                                                            # Displays info
    STATUS_HEATING                                                                                       # Sets SB-leds to heating-mode
    PARKCENTER                                                                                           # Goes to center of the bed
    M190 S{target_bed}                                                                                   # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                                                                 # Displays info
    G4 P300000                                                                                           # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                                                                    # Displays info
  M109 S150                                                                                              # Heats the nozzle to 150c
 
  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="QGL"                                                                             # Displays info
  clean_nozzle                                                                                           # clean nozzle
  STATUS_LEVELING                                                                                        # Sets SB-leds to leveling-mode
  QUAD_GANTRY_LEVEL                                                                                      # Levels the buildplate via QGL
  G28 Z                                                                                                  # Homes Z again after QGL

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"                                                                        # Displays info
  STATUS_MESHING                                                                                         # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                                                                                     # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"                                                      # Displays info
  STATUS_HEATING                                                                                         # Sets SB-leds to heating-mode
  PARKBUCKET                                                                                             # go to parkpos
  M109 S{target_extruder}                                                                                # Heats the nozzle to printing temp

  # Purge and clean nozzle
  purge_nozzle                                                                                           # purge nozzle in bucket
  clean_nozzle                                                                                           # clean nozzle

  #rdy to print 
  STATUS_READY                                                                                           # Sets SB-leds to ready
  M117 Start Print pos...  
  G90                                                                                                    # Use absolute coordinates
  G1  X{startprint[0]} Y{startprint[1]} Z{startprint[2]} F12000                                          # Move the nozzle to the start coords
  G92 E0.0                                                                                               # set extruder position to 0
  STATUS_PRINTING                                                                                        # Sets SB-leds to printing-mode
  M117 Printing...
  G21                                                                                                    # set units to millimeters
  G90                                                                                                    # Use absolute coordinates
  M83                                                                                                    # use relative distances for extrusion

##-------------------------------------------------------------------

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  M400                                                                                                   # wait for buffer to clear
  G92 E0                                                                                                 # zero the extruder
  G1 E-10.0 F3600                                                                                        # retract filament
  G91                                                                                                    # relative positioning
  G0 Z2.00 F20000                                                                                        # move nozzle to remove stringing
#  TURN_OFF_HEATERS
  _CASELIGHT_OFF
  STATUS_OFF
  M107                                                                                                   # turn off fan
  G90                                                                                                    # absolute positioning
  PARKBUCKET                                                                                             # park nozzle at rear
 # SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber TARGET=30                                          # vent until cooled down
 # _NEVERMORE_END
 # _CHAMBER_FAN_OFF
  BED_MESH_CLEAR
  M117

##-------------------------------------------------------------------

[gcode_macro PROBE_TEST]
#   Druckkopf auf QGL und Z0 Position zum Proben
gcode:
    _CG28
    PARKCENTER
    PROBE_ACCURACY SAMPLES=30
    G90
    G0 X230 Y225 Z15 F8000
    PROBE_ACCURACY SAMPLES=30
    G90
    G0 X230 Y15 Z15 F8000
    PROBE_ACCURACY SAMPLES=30
    G90
    G0 X20 Y15 Z15 F8000
    PROBE_ACCURACY SAMPLES=30
    G90
    G0 X20 Y225 Z15 F8000
    PROBE_ACCURACY SAMPLES=30
    PARKCENTER
 
##-------------------------------------------------------------------

[gcode_macro FILAMENT_WECHSEL]
gcode:
#   Druckkopf vorne oben übers bett
    _CG28
    {% set act_z = printer.toolhead.position.z|float %}
    {% set parkfilament = printer["gcode_macro _USER_VARIABLE"].parkfilament %}
    
    {% if act_z < parkfilament[2] %}
      G90
      G0 X{parkfilament[0]} Y{parkfilament[1]} Z{parkfilament[2]} F3600          # move head up to def height
    {% else %}
      G90
      G0 X{parkfilament[0]} Y{parkfilament[1]} F3600
    {% endif %}

##-------------------------------------------------------------------

[gcode_macro PARKCENTER]
gcode:
#   Druckkopf über Bettmitte
    _CG28
    {% set act_z = printer.toolhead.position.z|float %}
    {% set parkcenter = printer["gcode_macro _USER_VARIABLE"].parkcenter %}
    
    {% if act_z < parkcenter[2] %}
      G90
      G0 X{parkcenter[0]} Y{parkcenter[1]} Z{parkcenter[2]} F3600                # move head up to def height
    {% else %}
      G90
      G0 X{parkcenter[0]} Y{parkcenter[1]} F3600
    {% endif %}

##-------------------------------------------------------------------

[gcode_macro PARKBUCKET]
gcode:
#   Druckkopf über Bucket
    _CG28
    {% set act_z = printer.toolhead.position.z|float %}
    {% set parkbucket = printer["gcode_macro _USER_VARIABLE"].parkbucket %}
    
    {% if act_z < parkbucket[2] %}
      G90
      G0 X{parkbucket[0]} Y{parkbucket[1]} Z{parkbucket[2]} F3600                # move head up to def height
    {% else %}
      G90
      G0 X{parkbucket[0]} Y{parkbucket[1]} F3600
    {% endif %}

##-------------------------------------------------------------------





#####################################################################
#  Macros to debug the printer variable
#####################################################################
[gcode_macro DUMP_PARAMETERS]
description: Debug: Print all entries of the printer object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
description: Debug: Print all entries of the printer config object
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer.configfile.config %}
    {% set show = ['printer', "bed_mesh VORON-0C-MUELLER"] %}
    {% if name1 is in show %}
      {% set param = "printer.configfile.config['%s'] = %s" % (name1, printer.configfile.config[name1]) %}
      {% set parameters.output = parameters.output +  param + "\n" %}
    {% endif %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_SETTINGS]
description: Debug: Print all entries of the printer settings object
gcode:
  {%if 'S' in params %}
    {% set show = [params.S] %}
    {% set parameters = namespace(output = '') %}
    {% for name1 in printer.configfile.settings %}
      {% if name1 is in show %}
        {% for name2 in printer.configfile.settings[name1] %}
          {% set param = "printer.configfile.settings['%s'].%s = %s" % (name1, name2, printer.configfile.settings[name1][name2]) %}
          {% set parameters.output = parameters.output +  param + "\n" %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {action_respond_info(parameters.output)}
  {% else %}
    {action_respond_info("WARNING: parameter S needed call e.g. DUMP_SETTINGS S='printer'")}
  {% endif %}

## Use:
##   - DUMP_WARNINGS
[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}


#####################################################################
#  ausgabebeispiel Macros
#####################################################################

[gcode_macro _therm_test]
gcode:
  {% set CHAMBERTEMP = printer["temperature_sensor chamber"].temperature%}
  {action_respond_info("aktuelle Chambertemperatur: %f Grad C" % CHAMBERTEMP)}

[gcode_macro _therm_test2]
gcode:
  {% set CHAMBERTEMP = printer["temperature_sensor chamber"].temperature%}
  {% set NEVERMORE_OFF = printer["gcode_macro _USER_VARIABLE"].nevermore_off %}
  {action_respond_info("aktuelle Chambertemperatur: %ls Grad C" % CHAMBERTEMP)}
  {action_respond_info("Switch off at %ls Grad C" % NEVERMORE_OFF)}

